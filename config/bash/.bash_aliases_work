#functions
setup_env_file() {
    cd `git rev-parse --show-toplevel`
    echo export EFOSS_TOKEN=${EFOSS_TOKEN} >> .env
    echo export EFOSS_USER=${EFOSS_USER} >> .env
    echo export NEXUS_USER=${NEXUS_USER} >> .env
    echo export NEXUS_TOKEN=${NEXUS_TOKEN} >> .env
}

get_cwd() {
    if [[ -z $PRODUCT_BASE ]]; then
        echo $(pwd) | sed 's@'"$TBS/"'@tbs@'
        exit 0
    fi
    echo $(pwd) | sed 's@'"$PRODUCT_BASE/"'@dts/@'
}

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

commit_by_branch() {
    BRANCH=`git rev-parse --abbrev-ref HEAD`; (git commit -m "refs $BRANCH: $1")
}

get_exercise() {
    EXERCISE=""
    EXERCISE_COUNT=5
    REP_MIN=1
    REP_MAX=5
    INDEX=$(shuf -i 1-$EXERCISE_COUNT -n 1)
    case $INDEX in
        1)
        EXERCISE="PUSHUPS"
        REP_MIN=3
        REP_MAX=8
        ;;

        2)
        EXERCISE="SITUPS"
        REP_MIN=3
        REP_MAX=8
        ;;

        3)
        EXERCISE="SQUATS"
        ;;

        4)
        EXERCISE="PLANK"
        REP_MIN=5
        REP_MAX=15
        ;;

        5)
        EXERCISE="LUNGES"
        REP_MIN=3
        REP_MAX=8
        ;;
    esac

    COUNT=$(shuf -i $REP_MIN-$REP_MAX -n 1)

    echo "======================================================="
    echo -e "----------------------\n"
    echo "TIME TO EXERCISE"
    echo "Exercise: $EXERCISE"
    echo "Reps: $COUNT"
    echo -e "\n----------------------"
    echo "======================================================="
}

run_shell_in_container() {
    docker exec -it $1 /bin/bash
}

build_microservice_container() {
    MODEL=$1
    $PRODUCT_BASE/infrastructure/tools/build_container.sh dts-$MODEL-pr microservices/$MODEL/procedural
}

get_image_name() {
    CID=$(basename $(cat /proc/1/cpuset))
    if [[ $CID == '/' ]]; then
        echo $HOSTNAME
    else
        D_IMAGE_NAME=$(docker inspect --format='{{.Config.Image}}' $CID)
        # TOOD: do something fancier here
        echo ${D_IMAGE_NAME//e416232-}
    fi
}
# General Purpose
alias ll='ls -al --color=auto'
alias ls="ls -F --color=auto"
alias fclear="clear && printf '\e[3J'"
# Alias Management
alias codealiases="code ~/.bash_aliases"
alias coderc="code ~/.bashrc"
alias openrc="vim ~/.bashrc"
alias openaliases="vim ~/.bash_aliases"
alias re-source="source ~/.bashrc"

alias up='cd `git rev-parse --show-toplevel`'
alias psg='ps -ef | grep'
alias to-dts='cd /disk01/e416232/projects/dts'
alias to-tbs='cd /disk01/e416232/projects/tbs'
alias to-scripts='cd /disk01/e416232/projects/scripts'
# -> Prevent accidentally clobbering files
alias mkdir='mkdir -p'

# Sim Building
# General
alias makec='clear && make clean && make -j6'

# DTS
alias dts-cmake='(mkdir ${PRODUCT_BASE}/_build; cd ${PRODUCT_BASE}/_build; cmake ..)'
# Full Sim
alias dts-full-build='(dts-cmake; cd ${PRODUCT_BASE}/_build; make -j6)'
alias dts-clean-build='(dts-cmake; cd ${PRODUCT_BASE}/_build; make clean; make -j6)'
alias dts-full-clean-build='(cd ${PRODUCT_BASE}/_build; make clean; cd ${PRODUCT_BASE}; rm -rf _build; dts-full-build)'
# Single Dir
alias dts-dir-build='(cd $(pwd | sed -e "s+/dts/+/dts/_build/+"); make -j6)'
alias dts-dir-clean='(cd $(pwd | sed -e "s+/dts/+/dts/_build/+"); make clean)'
alias dts-dir-build-clean='(cd $(pwd | sed -e "s+/dts/+/dts/_build/+"); make clean; make -j6)'
# -----------------------------

# TBS
alias tbs-cmake='(mkdir ${TBS}/_build; cd ${TBS}/_build; cmake ..)'
# Full Sim
alias tbs-full-build='(tbs-cmake; cd ${TBS}/_build; make -j6)'
alias tbs-clean-build='(tbs-cmake; cd ${TBS}/_build; make clean; make -j6)'
alias tbs-full-clean-build='(cd ${TBS}/_build; make clean; cd ${TBS}; rm -rf _build; tbs-full-build)'
# Single Dir
alias tbs-dir-build='(cd $(pwd | sed -e "s+/tbs/+/tbs/_build/+"); make -j6)'
alias tbs-dir-clean='(cd $(pwd | sed -e "s+/tbs/+/tbs/_build/+"); make clean)'
alias tbs-dir-build-clean='(cd $(pwd | sed -e "s+/tbs/+/tbs/_build/+"); make clean; make -j6)'
# -----------------------------

# Git Management
alias prune-branches='git branch | grep -v "master" | xargs git branch -D '
alias gclean-list='git clean -nxdf -e .vscode'
alias gclean-full='git clean -xdf -e .vscode'
alias simclean="git clean -xdf -e *pb2*.py -e _build -e .vscode -e __init__.py -e Pybindings.cc"
alias rebase-branch='git rebase master $(git rev-parse --abbrev-ref HEAD)'
alias rebase-master='git checkout master && git pull --rebase && git submodule update --recursive'
alias gc="get_exercise; commit_by_branch"
alias gs='git status'
alias gb='git branch'
alias gp='git pull --rebase'
alias gmaster='git checkout master'

# Docker
alias prune-containers='docker rmi $(docker images -f dangling=true -q)'
alias runroot='docker run -it --rm -v $(pwd):/srv -w /srv registry.gitlab.us.lmco.com:443/tbs/internal/dts/dts-base-pr:latest /bin/bash'
alias runci='docker run -it --net=host --rm -v $(pwd):/builds/tbs/internal/dts -w /builds/tbs/internal/dts registry.gitlab.us.lmco.com:443/tbs/tbs/runtime-ci:latest /bin/bash'
alias attach="run_shell_in_container"
alias set-image-tag='export IMAGE_TAG=$(git rev-parse --abbrev-ref HEAD); echo IMAGE_TAG=$IMAGE_TAG'
alias buildcontainer='build_microservice_container '

# Running the sim / SBIRS5
alias simgdb='(cd $TBS; ./infrastructure/deployment/makedeploy/make_deploy.py sbirs-sv5-deploy; ./infrastructure/deployment/makerelease/make_release.py sbirs-sv5 -t; cd release/_docker_deploy; gdb python3)'
alias simlocal='(cd $TBS; ./infrastructure/deployment/makedeploy/make_deploy.py sbirs-sv5-deploy; ./infrastructure/deployment/makerelease/make_release.py sbirs-sv5 -t; cd release/_docker_deploy; simulation/simcore/simexec/simplesim.py -at sbirs sv5 emtb --scenario programs/sbirs/jado/)'

# Package management
alias nexus-install='sudo -E nexus pip3 install '
alias pipi='pip --proxy https://proxy-lmi.global.lmco.com:80 --trusted-host pypi.python.org --trusted-host pypi.org --trusted-host files.pythonhosted.org install '

# Kubernetes
alias k=kubectl

# Binary Execution
run-dts-binary() {
    echo "Running $PRODUCT_BASE/_build/tbs_Linux_x86_64/bin/$1"
    $PRODUCT_BASE/_build/tbs_Linux_x86_64/bin/$1
}
alias runbin=run-dts-binary

if [[ ${TERM_PROGRAM} == "vscode" ]]; then
    alias vim=code
else
    alias vim=nvim
fi
